//Some concepts were taken from "lsh" by Stephen Brennan
//at brennan.io/2015/01/16/write-a-shell-in-c
//Particularly the main function and loop function
//The rest was coded by myelf

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>

#define MAX_STR_SIZE 500
#define STD_STR_BUFFER 50

typedef int bool;
#define true 1
#define false 0

int argamounts;
char *thedirectory;

//Functions shell can use
int shexit(char** args);
int wfile(char** args);
int change_directory(char** args);
int getdirectory(char** args);
int ypsh_echo(char** args);

char *funcnames[]={
    "shexit",
    "wfile",
    "cd",
    "getdir",
    "echo"
};

int (*funcs[])(char **) = {
    &shexit,
    &wfile,
    &change_directory,
    &getdirectory,
    &ypsh_echo
};

int funcnum(){
    return sizeof(funcnames)/sizeof(char*);
}

void ypsh_loop(void);
char * read_line(void);
char ** read_args(char* line);

int slen(char *thestring)
{
    int charcount=0;
    while (*thestring !='\0')
    {
        //printf("%c ",*thestring);
        charcount++;
        thestring++;

    }

    return charcount;

}

char **parsecmd(char *fullline)
{
    //array of possible delimiters
    int dlamount=3;
    char* delimiters=(char*)malloc(sizeof(char)*3);
    delimiters[0]=' ';
    delimiters[1]='|';
    delimiters[2]='>';

    //for use in a for loop to run through delimiters
    int checkdl;

    //create an array of strings and allocate memory for all strings within array
    char** returnarray=(char**)malloc(100*sizeof(char*));
    int initdblptr;
    for (initdblptr=0;initdblptr<100;initdblptr++)
        returnarray[initdblptr]=(char*)malloc(sizeof(char)*STD_STR_BUFFER);

    //Subscript of strings, at -1 when none
    int rtnarrayindx=-1;

    //for copying to arg
    char *tempstr=(char*)calloc(STD_STR_BUFFER,sizeof(char));
    //char tempstr[STD_STR_BUFFER];
    int tempstrindx=0;

    //copy line read from shell
    char strbuffer[STD_STR_BUFFER];
    int strbufferindx=0;

    strcpy(strbuffer,fullline);

    int lastcharpos;
    lastcharpos=0;

    int charpos;
    charpos=0;

    //for use in for loop
    int chopstring;

    bool divisionflag;

    while(strbuffer[strbufferindx] != '\0')
    {
    divisionflag=false;
        for(checkdl=0;checkdl<dlamount;checkdl++)
        {
            if(strbuffer[charpos]==delimiters[checkdl] && delimiters[checkdl]!=' ')
            {
                divisionflag=true;

            }
        }

        //split at delimiter if divisionflag is true
        if(divisionflag==true){
            divisionflag=false;
            rtnarrayindx++;
            argamounts++;

            for (chopstring=lastcharpos;chopstring<charpos;chopstring++)
            {
                tempstr[tempstrindx]=strbuffer[chopstring];
                tempstrindx++;
            }
            tempstr[tempstrindx]='\0';

            //move lastcharpos to current charpos but skip the delimiiter (hence charpos+1) as long
            //as charpos isn't the last character already for some reason
            if(charpos<slen(strbuffer)-1){
            lastcharpos=charpos+1;}
            else{
            lastcharpos=slen(strbuffer)-1;}

            tempstrindx=0;

            strcpy(returnarray[rtnarrayindx],tempstr);

            printf("rtnarray indx %d is %s\n",rtnarrayindx,returnarray[rtnarrayindx]);


        }


        charpos++;
        strbufferindx++;
    }

    //at end need to take the remaining strings and parse into returnargs
        rtnarrayindx++;
        argamounts++;

        for (chopstring=lastcharpos;chopstring<slen(strbuffer);chopstring++)
        {
            tempstr[tempstrindx]=strbuffer[chopstring];
            tempstrindx++;
        }
        tempstr[tempstrindx]='\0';
        tempstrindx=0;

        printf("tempstr is %s\n",tempstr);
        //printf("fullline is %s\n",fullline);
        //printf("strbuff is %s\n",strbuffer);
        //printf("strbufflen is %d\n",slen(strbuffer));

        strcpy(returnarray[rtnarrayindx],tempstr);

        printf("rtnarray indx %d is %s\n",rtnarrayindx,returnarray[rtnarrayindx]);



    free(tempstr);
    free(delimiters);

    return returnarray;
}

char* dlinterp(char *line)
{
    int dlamount=3;
    char* delimiters=(char*)malloc(sizeof(char)*3);
    delimiters[0]=' ';
    delimiters[1]='|';
    delimiters[2]='>';

    int checkdl;

    char* returnline=(char*)malloc(sizeof(char)*STD_STR_BUFFER);
    int charpos;
    charpos=0;

    //check characters around whitespaces
    char* nextchar;
    char* prevchar;
    bool skip=false;

    while(*line != '\0')
    {
    //set skip chars as false first
    skip=false;

        //for (checkdl=0; checkdl<dlamount; checkdl++)
        //    {
                //if(*line==delimiters[checkdl])
                if(*line==' ')
                {
                    //read next char
                    nextchar=line+1;
                    prevchar=line-1;
                    //cycle through all delimiters
                    for (checkdl=0; checkdl<dlamount; checkdl++)
                    {

                        //if nextchar is not null
                        if (*nextchar!='\0' && *prevchar!='\0')
                        {
                            //if the next char is a delimiter then skip this space
                            if(*nextchar==delimiters[checkdl] || *prevchar==delimiters[checkdl]){
                            skip=true;

                            }
                        }
                    }


                }

          //  }

            //Only add if skip is false
            if(skip==false){
            returnline[charpos]=*line;
            charpos++;
            }

        //Move to next char in line
        line++;
    }

    returnline[charpos]='\0';

    free(delimiters);
    return returnline;


}



//Readline, readargs, execute sections
char* read_line(void)
{
	char* inputline;
	//allow up to 100 chars in a line for now
	inputline=(char*)malloc(sizeof(char)*100);
	//scanf("%99[^\n]",inputline);


	fgets(inputline,MAX_STR_SIZE,stdin);
	if ((strlen(inputline)>0) && (inputline[strlen (inputline) - 1] == '\n'))
        inputline[strlen (inputline) - 1] = '\0';

	return inputline;

}

char** read_args(char* line)
{
argamounts=0;
//tokens and strtok was taken from tutorialspoint regarding the strtok function
    char** returnargs;

    char* dlcheckline;
    if(line[0]!='\0'){
    //printf("The line is %s.\n",line);
    dlcheckline=dlinterp(line);}
    else{
    //printf("Line is null.");
    dlcheckline=line;
    }

    returnargs=parsecmd(dlcheckline);
    free(dlcheckline);

    return returnargs;
}


//For now only execute functions that are found, not priority
int shexecute(char** args)
{
    //printf("%s\n", args[0]);
    int finalreturn=0;
    int checkfunc;
    int runargs;
    //bool argneverfound;
    //argneverfound=false;

    bool argfound;
    argfound=false;

    char strbackup[40];

    for (runargs=0; runargs<argamounts; runargs++){
    //reset argfound
    argfound=false;
        for (checkfunc=0; checkfunc<funcnum(); checkfunc++)
        {
            //Using strtok here so that the first argument is read to be passed to execute
            //Testing to see whether whole string still gets passed
            //only cd gets passed.

            strcpy(strbackup,args[runargs]);
            if (strcmp(funcnames[checkfunc],strtok(strbackup," "))==0)
            {
                //flag that an arg is found
                argfound=true;

                //Execute all commands before final one
                if (runargs<argamounts-1){
                //printf("%s\n", "non-last arg exec was reached");
                (*funcs[checkfunc])(args);}
                //final command gives status
                else if (runargs==argamounts-1 && args[runargs]!=NULL){
                finalreturn=(*funcs[checkfunc])(args);}
                else{
                printf("Error reading multiple arguments");
                finalreturn=0;}

            }
            //free(strbackup);
        }//cycle through functions for loop

                //if there wasn't an argument found output that command is not found
                if(argfound==false){
                printf("No such command %s.\n",strbackup);
                finalreturn=1;
                }

    }//runargs for loop
    return finalreturn;

}


// ** Shell functions start here **

int shexit(char** args){
return 0;
}

int ypsh_echo(char** args){

char strbuffer[STD_STR_BUFFER];
strcpy(strbuffer,args[0]);

char* token;
token=strtok(strbuffer," ");

while (token!=NULL){
    if (strcmp(token,"echo")!=0){
        printf("%s",token);
    }

    token=strtok(NULL,"");

}
printf("\n");

return 1;
}

int getdirectory(char** args){
    printf("getdir was reached.\n");
    char* diroutput=(char*)malloc(sizeof(char)*STD_STR_BUFFER);
    getcwd(diroutput,STD_STR_BUFFER);
    printf("The current working directory is: %s \n",diroutput);
    free(diroutput);
    return 1;
}


int change_directory(char** args){
    char* firstline;
    firstline=args[0];

    char strbackup[STD_STR_BUFFER];

    strcpy(strbackup,firstline);
    //printf("whole cd line is %s.\n",firstline);

    char* token;
    bool getnextarg=false;

     token=strtok(strbackup," ");

        while (token!=NULL)
        {
            if(strcmp(token,"cd")==0){
            getnextarg=true;
            }
            //printf("token is %s.\n",token);
            token=strtok(NULL," ");

            if(getnextarg==true){
            //printf("Directory changed to %s.\n",token);
                if(chdir(token)==0){
                    strcpy(thedirectory,token);}
                else{
                    perror("Invalid directory");
                    };

                    getnextarg=false;

            }

            //printf("%s second token\n",token);
            //tokens[argsub]=strtok(NULL,"|");
        }



    return 1;
}


//-------------------------------------------------------------------------------------------
//wfile section
int encrypt(void);
int decrypt(void);
int normal(void);

FILE *fp1, *fp2;
char ch;

int wfile(char ** args)
{
    bool wfileloop = true;
    int choice;
    while(wfileloop)
    {
        printf("Select One of the Following:\n");
        printf("\n1. Encrypt\n");
        printf("2. Decrypt\n");
        printf("3. Normal\n");
        printf("4. Exit\n");
        printf("Enter here: \t");
        scanf("%d%*c", &choice);
        switch(choice)
        {
            case 1: encrypt(); break;
            case 2: decrypt(); break;
            case 3: normal(); break;
            case 4: wfileloop=false; return 1;//ypsh_loop();
        }

    }
    printf("\n");
    return 0;
}



int normal()
{
    char a[] = "\nThis is Normal Mode\n";
    printf("%s%s", a, "File is not encrypted.\n");

    int num;

    char *filepath;
    filepath= (char*) malloc(100*sizeof(char));
    char *linetoFile;
    linetoFile= (char*) malloc(30*sizeof(char));
    char *printmode;
    printmode = (char*)malloc(5*sizeof(char));
    printf("Please enter the filepath with extension: ");
    fgets(filepath,MAX_STR_SIZE,stdin);

    if ((strlen(filepath)>0) && (filepath[strlen (filepath) - 1] == '\n'))
        filepath[strlen (filepath) - 1] = '\0';


    printf("Enter print mode (a to append, w to rewrite): ");
    fgets(printmode,MAX_STR_SIZE,stdin);

    if ((strlen(printmode)>0) && (printmode[strlen (printmode) - 1] == '\n'))
        printmode[strlen (printmode) - 1] = '\0';


    fp1 = fopen(filepath,printmode);

    if (fp1==NULL)
    {
        printf("Error!");
        exit(1);
    }

    printf("Enter type of input to file (s for string, i for integer): ");

    char *inputType;
    inputType=(char*)malloc(2*sizeof(char));


    fgets(inputType,MAX_STR_SIZE,stdin);
    if ((strlen(inputType)>0) && (inputType[strlen (inputType) - 1] == '\n'))
        inputType[strlen (inputType) - 1] = '\0';

    if (strcmp(inputType,"i")==0){
    printf("Enter integer(s): ");
    scanf("%d", &num);
    fprintf(fp1, "%d\n",num);

    }
    else if (strcmp(inputType,"s")==0){
    printf("Enter string: ");

    fgets(linetoFile,MAX_STR_SIZE,stdin);
    if ((strlen(linetoFile)>0) && (linetoFile[strlen (linetoFile) - 1] == '\n'))
        linetoFile[strlen (linetoFile) - 1] = '\0';

    fprintf(fp1, "%s\n",linetoFile);
    }





    fclose(fp1); //close pointer

    free(filepath);
    free(linetoFile);
    free(printmode);
    free(inputType);
    return 0;
}

int encrypt()
{
    char a[] = "\nThis is Encryption Mode\n";
    printf("%s%s", a, "File is encrypted.\n");

    int num;

    char *filepath;
    filepath= (char*) malloc(100*sizeof(char));
    char *linetoFile;
    linetoFile= (char*) malloc(30*sizeof(char));
    char *printmode;
    printmode = (char*)malloc(5*sizeof(char));
    printf("Please enter the filepath with extension: ");
    fgets(filepath,MAX_STR_SIZE,stdin);

    char *inputType;
        inputType=(char*)malloc(2*sizeof(char));

    if ((strlen(filepath)>0) && (filepath[strlen (filepath) - 1] == '\n'))
        filepath[strlen (filepath) - 1] = '\0';

    char *eOrw;
    eOrw=(char*)malloc(5*sizeof(char));
    printf("Encrypt contents or write/append then encrypt? (e or w): ");
	fgets(eOrw, MAX_STR_SIZE,stdin);
    if ((strlen(eOrw)>0) && (eOrw[strlen (eOrw) - 1] == '\n'))
        eOrw[strlen (eOrw) - 1] = '\0';


    if (strcmp(eOrw,"w")==0)
    {
        printf("Enter print mode (a to append, w to rewrite): ");
        fgets(printmode,MAX_STR_SIZE,stdin);

        if ((strlen(printmode)>0) && (printmode[strlen (printmode) - 1] == '\n'))
            printmode[strlen (printmode) - 1] = '\0';

        fp1 = fopen(filepath,printmode);

        if (fp1==NULL)
        {
            printf("Error!");
            exit(1);
        }

        printf("Enter type of input to file (s for string, i for integer): ");




        fgets(inputType,MAX_STR_SIZE,stdin);
        if ((strlen(inputType)>0) && (inputType[strlen (inputType) - 1] == '\n'))
            inputType[strlen (inputType) - 1] = '\0';

        if (strcmp(inputType,"i")==0){
        printf("Enter integer(s): ");
        scanf("%d", &num);
        fprintf(fp1, "%d\n",num);

        }
        else if (strcmp(inputType,"s")==0){
        printf("Enter string: ");

        fgets(linetoFile,MAX_STR_SIZE,stdin);
        if ((strlen(linetoFile)>0) && (linetoFile[strlen (linetoFile) - 1] == '\n'))
            linetoFile[strlen (linetoFile) - 1] = '\0';

        fprintf(fp1, "%s\n",linetoFile);
        fclose(fp1);
        }

    }//if write option was taken


    fp1 = fopen(filepath,"r+");


    bool keepEncrypt = true;

    while(keepEncrypt)
    {
        ch = fgetc(fp1);
        if(ch == EOF)
        {
            printf("\nEnd Of File\n");
            keepEncrypt=false;
        }
        else
        {
            fseek(fp1, ftell(fp1)-1,SEEK_SET);
            ch = ch - (8 * 5 - 3);
            fputc(ch, fp1);

        }
    }



    fclose(fp1); //close pointer

    free(eOrw);
    free(filepath);
    free(linetoFile);
    free(printmode);
    free(inputType);
    return 0;
}

int decrypt()
{
    char a[] = "\nThis is Decryption Mode\n";
    printf("%s%s", a, "File will be decrypted.\n");


    char *filepath;
    filepath= (char*) malloc(100*sizeof(char));

    printf("Please enter the filepath with extension: ");
    fgets(filepath,MAX_STR_SIZE,stdin);

    if ((strlen(filepath)>0) && (filepath[strlen (filepath) - 1] == '\n'))
        filepath[strlen (filepath) - 1] = '\0';

    char *confirm;
    confirm=(char*)malloc(5*sizeof(char));
    printf("Decrypt content? (y or n): ");
	fgets(confirm, MAX_STR_SIZE,stdin);
    if ((strlen(confirm)>0) && (confirm[strlen (confirm) - 1] == '\n'))
        confirm[strlen (confirm) - 1] = '\0';


    if (strcmp(confirm,"y")==0)
    {
        fp1 = fopen(filepath,"r+");

        bool keepEncrypt = true;

    while(keepEncrypt)
    {
        ch = fgetc(fp1);
        if(ch == EOF)
        {
            printf("\nEnd Of File\n");
            keepEncrypt=false;
        }
        else
        {
            fseek(fp1, ftell(fp1)-1,SEEK_SET);
            ch = ch + (8 * 5 - 3);
            fputc(ch, fp1);
        }
    }


    }//if decrypt








    fclose(fp1); //close pointer

    free(confirm);
    free(filepath);

    return 0;
}

//---------------------------------------------------------------------------------------------
//End of wfile section

//loop and main
void ypsh_loop(void)
{
	char *line;
	char **args;
	int status;

    thedirectory=(char*)calloc(STD_STR_BUFFER,sizeof(char));

    getcwd(thedirectory,STD_STR_BUFFER);
    //thedirectory[0]='~';

	do {
	printf("ypsh %s> ",thedirectory);
	line = read_line();
	args=read_args(line);

	if (argamounts>0){
	status=shexecute(args);}
	else{
	status=1;}

        free(line);
        printf("amount of args %i\n",argamounts);
        int freedouble;
        for(freedouble=0; freedouble<argamounts; freedouble++)
        {
            printf("argument %d is %s address is %s pointer val is %d \n",
            freedouble,args[freedouble],&*args[freedouble],*args[freedouble]);
            //free(args[freedouble]);
        }

        for(freedouble=0; freedouble<100; freedouble++)
        {
            //printf("argument %d is %s address is %s pointer val is %d \n",
            //freedouble,args[freedouble],&*args[freedouble],*args[freedouble]);
            free(args[freedouble]);
        }

        //if(argamounts>0){
        //free(*args);}

        free(args);
        printf("status is %d \n", status);

	}while(status);

    free(thedirectory);
}

int main(int argc, char ** argv)
{
//Load configs

//Run command loop

ypsh_loop();


return EXIT_SUCCESS;
}


